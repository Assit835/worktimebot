import logging
import os
import io
import sqlite3
import pandas as pd
import re
from datetime import datetime, timedelta
from math import radians, cos, sin, asin, sqrt
from datetime import timezone
import pytz
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, ConversationHandler, filters
)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
OFFICE_LAT = 57.133063
OFFICE_LON = 65.506559
MAX_DISTANCE_METERS = 100
ADMIN_CHAT_ID = 1187398378
ASK_NAME = 1
report_tables = {}

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
conn = sqlite3.connect("attendance.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS employees (
    user_id INTEGER PRIMARY KEY,
    name TEXT,
    expected_start_time TEXT DEFAULT '10:00')''')
cursor.execute('''CREATE TABLE IF NOT EXISTS actions (
    user_id INTEGER PRIMARY KEY,
    action TEXT)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS attendance (
    user_id INTEGER, username TEXT, date TEXT, time_in TEXT, time_out TEXT,
    lat_in REAL, lon_in REAL, lat_out REAL, lon_out REAL)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS tardiness (
    user_id INTEGER, date TEXT, time_in TEXT, delay_minutes INTEGER)''')
conn.commit()

# --- –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

# --- –£—Ç–∏–ª–∏—Ç—ã ---
def haversine(lat1, lon1, lat2, lon2):
    lat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    a = sin(dlat/2)**2 + cos(lat1)*cos(lat2)*sin(dlon/2)**2
    return 2 * asin(sqrt(a)) * 6371 * 1000

def is_registered(user_id):
    cursor.execute("SELECT name FROM employees WHERE user_id=?", (user_id,))
    return cursor.fetchone()

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if is_registered(user_id):
        return await show_main_menu(update)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    return ASK_NAME

async def save_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    user_id = update.message.from_user.id
    cursor.execute("REPLACE INTO employees (user_id, name) VALUES (?, ?)", (user_id, name))
    conn.commit()
    await update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ, {name}!")
    return await show_main_menu(update)

async def show_main_menu(update: Update):
    keyboard = [[KeyboardButton("–ü—Ä–∏—à–µ–ª")], [KeyboardButton("–£—à–µ–ª")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    return ConversationHandler.END

async def handle_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    action = update.message.text.lower()
    if action not in ["–ø—Ä–∏—à–µ–ª", "—É—à–µ–ª"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.")
        return
    cursor.execute("REPLACE INTO actions (user_id, action) VALUES (?, ?)", (update.message.from_user.id, action))
    conn.commit()
    keyboard = [[KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True)]]
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é.", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    location = update.message.location
    lat, lon = location.latitude, location.longitude
    username = user.username or user.first_name

    dist = haversine(OFFICE_LAT, OFFICE_LON, lat, lon)
    local_tz = pytz.timezone("Asia/Yekaterinburg")  # –∑–∞–º–µ–Ω–∏ –Ω–∞ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –∑–æ–Ω—É
    now = datetime.now(local_tz)

    date_str = now.strftime("%Y-%m-%d")
    time_str = now.strftime("%H:%M:%S")

    cursor.execute("SELECT action FROM actions WHERE user_id=?", (user_id,))
    res = cursor.fetchone()
    if not res:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ.")
        return

    action = res[0]
    cursor.execute("DELETE FROM actions WHERE user_id=?", (user_id,))
    conn.commit()

    if action == "–ø—Ä–∏—à–µ–ª":
        if dist <= MAX_DISTANCE_METERS:
            cursor.execute("INSERT INTO attendance (user_id, username, date, time_in, lat_in, lon_in) VALUES (?, ?, ?, ?, ?, ?)",
                           (user_id, username, date_str, time_str, lat, lon))
            conn.commit()

            cursor.execute("SELECT expected_start_time FROM employees WHERE user_id=?", (user_id,))
            res = cursor.fetchone()
            if res is None or res[0] is None:
                expected = "10:00"
            else:
                expected = res[0]


            if not re.match(r"^\d{1,2}:\d{2}$", expected):
                expected = "10:00"

            today = datetime.now().date()
            expected_dt = local_tz.localize(datetime.combine(today, datetime.strptime(expected, "%H:%M").time()))
            actual_dt = now  # –æ–Ω —É–∂–µ —Å –Ω—É–∂–Ω–æ–π –∑–æ–Ω–æ–π
            delay = (actual_dt - expected_dt).total_seconds() / 60


            logging.info(f"User {user_id} expected: {expected_dt.time()}, actual: {actual_dt.time()}, delay: {delay} min")

            if delay > 0:
                delay = int(delay)
                cursor.execute("INSERT INTO tardiness (user_id, date, time_in, delay_minutes) VALUES (?, ?, ?, ?)",
                               (user_id, date_str, time_str, delay))
                conn.commit()
                await update.message.reply_text(f"‚ö†Ô∏è –û–ø–æ–∑–¥–∞–Ω–∏–µ –Ω–∞ {delay} –º–∏–Ω—É—Ç.")

            await update.message.reply_text(f"‚úÖ –ü—Ä–∏—Ö–æ–¥ –æ—Ç–º–µ—á–µ–Ω. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {int(dist)} –º.")
        else:
            await update.message.reply_text(f"‚ùå –í–Ω–µ –æ—Ñ–∏—Å–∞. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {int(dist)} –º.")

    elif action == "—É—à–µ–ª":
        cursor.execute("SELECT * FROM attendance WHERE user_id=? AND date=? AND time_out IS NULL", (user_id, date_str))
        if cursor.fetchone():
            cursor.execute("UPDATE attendance SET time_out=?, lat_out=?, lon_out=? WHERE user_id=? AND date=?",
                           (time_str, lat, lon, user_id, date_str))
            conn.commit()
            await update.message.reply_text(f"‚úÖ –£—Ö–æ–¥ –æ—Ç–º–µ—á–µ–Ω. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {int(dist)} –º.")
        else:
            await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ—Ç—å –ø—Ä–∏—Ö–æ–¥.")

    await show_main_menu(update)

async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    keyboard = [
        [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="report_today")],
        [InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data="report_7")],
        [InlineKeyboardButton("30 –¥–Ω–µ–π", callback_data="report_30")],
        [InlineKeyboardButton("365 –¥–Ω–µ–π", callback_data="report_365")]
    ]
    await update.message.reply_text("üìä –í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞:", reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_report_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    label_map = {
        "report_today": ("—Å–µ–≥–æ–¥–Ω—è", 0),
        "report_7": ("7 –¥–Ω–µ–π", 7),
        "report_30": ("30 –¥–Ω–µ–π", 30),
        "report_365": ("365 –¥–Ω–µ–π", 365)
    }

    if query.data not in label_map:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
        return

    label, days = label_map[query.data]
    start_date = (datetime.now() - timedelta(days=days)).strftime("%Y-%m-%d") if days else datetime.now().strftime("%Y-%m-%d")
    cursor.execute("SELECT user_id, name FROM employees")
    employees = cursor.fetchall()

    report_lines = [f"üìä –û—Ç—á–µ—Ç –∑–∞ {label}:"]
    table = []

    for user_id, name in employees:
        cursor.execute("SELECT COUNT(*), AVG(delay_minutes) FROM tardiness WHERE user_id=? AND date >= ?", (user_id, start_date))
        count, avg = cursor.fetchone()
        if count:
            avg_delay = int(avg)
            report_lines.append(f"‚Äî {name}: {count} –æ–ø–æ–∑–¥–∞–Ω–∏–π (—Å—Ä. {avg_delay} –º–∏–Ω)")
            table.append({"–°–æ—Ç—Ä—É–¥–Ω–∏–∫": name, "–ö–æ–ª-–≤–æ –æ–ø–æ–∑–¥–∞–Ω–∏–π": count, "–°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞ (–º–∏–Ω)": avg_delay})
        else:
            report_lines.append(f"‚Äî {name}: –±–µ–∑ –æ–ø–æ–∑–¥–∞–Ω–∏–π")
            table.append({"–°–æ—Ç—Ä—É–¥–Ω–∏–∫": name, "–ö–æ–ª-–≤–æ –æ–ø–æ–∑–¥–∞–Ω–∏–π": 0, "–°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞ (–º–∏–Ω)": "‚Äî"})

    report_tables[query.from_user.id] = pd.DataFrame(table)

    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìé –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data=f"download_excel_{label}")]
    ])
    await query.edit_message_text("\n".join(report_lines), reply_markup=reply_markup)

async def handle_excel_download(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if user_id not in report_tables:
        await query.edit_message_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏ /report.")
        return

    df = report_tables[user_id]
    excel_buffer = io.BytesIO()
    df.to_excel(excel_buffer, index=False)
    excel_buffer.seek(0)

    await context.bot.send_document(
        chat_id=user_id,
        document=excel_buffer,
        filename="report.xlsx"
    )

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ /report.")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ù–∞–ø—Ä–∏–º–µ—Ä: https://your-app.onrender.com

application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

application.add_handler(ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_name)]},
    fallbacks=[], allow_reentry=True
))
application.add_handler(CommandHandler("report", report))
application.add_handler(CallbackQueryHandler(handle_report_button, pattern="^report_"))
application.add_handler(CallbackQueryHandler(handle_excel_download, pattern="^download_excel_"))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_action))
application.add_handler(MessageHandler(filters.LOCATION, handle_location))
application.add_handler(MessageHandler(filters.COMMAND, unknown))

class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == "/":
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b"OK")
        else:
            self.send_response(404)
            self.end_headers()

def run_health_server():
    server = HTTPServer(("0.0.0.0", 8080), HealthHandler)
    server.serve_forever()

threading.Thread(target=run_health_server, daemon=True).start()


if __name__ == "__main__":
    application.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 5000)),
        url_path="webhook",
        webhook_url=f"{WEBHOOK_URL}/webhook"
    )
